panel.grid.major.y = element_blank()
)
ggplotly(plot)
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot_all)
View(c_long.filtered)
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot_all)
View(c_long)
c_long = counts %>% pivot_longer(cols = 2:13, names_to = 'sample', values_to='counts') %>% drop_na()
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot_all)
# Order variables by median
c_long$gene <- factor(c_long$gene, levels = medians$gene[order(-medians$median)])
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot_all)
View(c_long)
c_long = counts %>% pivot_longer(cols = 2:13, names_to = 'sample', values_to='counts') %>% drop_na(gene)
# Order variables by median
c_long$gene <- factor(c_long$gene, levels = medians$gene[order(-medians$median)])
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot_all)
View(c_long)
View(medians)
c_long = counts %>% pivot_longer(cols = 2:13, names_to = 'sample', values_to='counts') %>% drop_na(gene)
# Order variables by median
c_long$gene <- factor(c_long$gene, levels = medians$gene[order(-medians$median)])
# Order variables by median
c_long$gene = factor(c_long$gene, levels = medians$gene[order(-medians$median)]) %>% drop_na(gene)
c_long = c_long %>% drop_na()
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot_all)
ggplotly(plot)
View(medians.og)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/Comparison_BingList.xlsx")
View(nv.genes)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx")
View(nv.genes)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", header=FALSE)
?read_xlsx
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", col_names=FALSE)
View(nv.genes)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", col_names=FALSE) %>% rename(`...1` = 'genes')
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", col_names=FALSE) %>% rename('genes' = `...1`)
View(nv.genes)
nv.genes = nv.genes %>% unique()
medians.og$nv = medians.og$gene %in% nv.genes$genes
View(medians.og)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", col_names=FALSE) %>% rename('genes' = `...1`)
nv.genes = nv.genes %>% mutate(gsub("'", "", nv.genes$gene)) %>%
unique()
nv.genes = nv.genes %>% mutate(gene = gsub("'", "", nv.genes$gene)) %>%
unique()
View(nv.genes)
nv.genes = nv.genes %>% mutate(gene = gsub("'", "", nv.genes$genes)) %>%
unique()
View(nv.genes)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", col_names=FALSE) %>% rename('genes' = `...1`)
nv.genes = nv.genes %>% mutate(gene = gsub("'", "", nv.genes$genes)) %>%
unique() %>% select(gene)
medians.og$nv = medians.og$gene %in% nv.genes$gene
medians.og$rank = rank(-medians.og$median, ties.method = "median")
medians.og$rank = rank(-medians.og$median)
ggplotly(plot)
# Sort by median left to right
medians = counts %>% rowwise() %>% mutate(median = median(c_across(1:12)), range = max(c_across(2:12)) - min(c_across(2:12))) %>% ungroup() %>%
select(gene, median, range) %>%
arrange(desc(median))
# Sort by median left to right
medians = counts %>% rowwise() %>% mutate(median = median(c_across(2:12)), range = max(c_across(2:12)) - min(c_across(2:12))) %>% ungroup() %>%
select(gene, median, range) %>%
arrange(desc(median))
medians$in_final = medians$gene %in% list.final$GENE_SYMBOL
medians$is_essential = medians$gene %in% list.essential$customer_gene_symbol
medians$not_possible = medians$gene %in% list.nope$customer_gene_symbol
medians.og = medians
medians = medians %>% filter(in_final == TRUE, is_essential == FALSE, not_possible == FALSE)
# Sort by median left to right
medians = counts %>% rowwise() %>% mutate(median = median(c_across(2:13)), range = max(c_across(2:12)) - min(c_across(2:12))) %>% ungroup() %>%
select(gene, median, range) %>%
arrange(desc(median))
medians$in_final = medians$gene %in% list.final$GENE_SYMBOL
medians$is_essential = medians$gene %in% list.essential$customer_gene_symbol
medians$not_possible = medians$gene %in% list.nope$customer_gene_symbol
medians.og = medians
medians = medians %>% filter(in_final == TRUE, is_essential == FALSE, not_possible == FALSE)
gr1 = medians %>% filter(median > 1)
median_of_medians_gr1 = median(gr1$median)
# Order variables by median
c_long$gene = factor(c_long$gene, levels = medians$gene[order(-medians$median)])
c_long = c_long %>% drop_na()
plot_all = ggplot(c_long, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = "Count Spread by Gene (Full data)", x='Gene', y='Count') +
theme_minimal() +
annotate("text",x=130.5, y=12000, label=paste("Median of Median Gene Count:", median_of_medians), color='red',family='Franklin Gothic', size=4) +
annotate("text",x=130.5, y=11250, label=paste("Median of Median Gene Count (Med > 1):", median_of_medians_gr1), color='orange',size=4,family='Franklin Gothic') +
geom_hline(yintercept = median_of_medians, linetype = "dashed", color = "orange", size = 1) +
geom_hline(yintercept = median_of_medians_gr1, linetype = "dashed", color = "red", size = 1) +
scale_y_continuous(breaks = c(0, 5000, 10000, 15000)) +  # Specify y-axis tick marks
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
top50_med = medians %>% slice(1:100)
c_long.filtered = c_long %>% filter(gene %in% top50_med$gene)
c_long.filtered$gene <- factor(c_long.filtered$gene, levels = medians$gene[order(-medians$median)])
median_of_medians.filtered = median(top50_med$median)
min_of_medians.filtered = min(top50_med$median)
max_of_medians.filtered = 11765
plot = ggplot(c_long.filtered, aes(x = gene, y = counts)) +
geom_boxplot() +
labs(title = paste("Count Spread by Gene ( Top 100 of", nrow(medians), ")"), x='Gene', y='Count') +
theme_minimal() +
scale_y_continuous(breaks = c(0, round(min_of_medians.filtered, 0), round(median_of_medians.filtered, 0), round(max_of_medians.filtered, 0), 15000)) +  # Specify y-axis tick marks
annotate("text",x=37.5, y=15000, label=paste("Max:", max_of_medians.filtered), family='Franklin Gothic Book') +
annotate("text",x=37.5, y=14000, label=paste("Median:", median_of_medians.filtered), family='Franklin Gothic Book') +
annotate("text",x=37.5, y=13000, label=paste("Min:", min_of_medians.filtered), family='Franklin Gothic Book') +
geom_hline(yintercept = min_of_medians.filtered, linetype = "dashed", color = "red", size = 1) +
geom_hline(yintercept = median_of_medians.filtered, linetype = "dashed", color = "lightblue", size = 1) +
geom_hline(yintercept = max_of_medians.filtered, linetype = "dashed", color = "orange", size = 1) +
theme(
plot.title = element_text(hjust = 0.5, family='Franklin Gothic'),
axis.text.x = element_text(angle = 90, hjust=1, vjust=1, family='Franklin Gothic Book'),
panel.grid.minor.y = element_blank(),
panel.grid.major.y = element_blank()
)
ggplotly(plot)
ggplotly(plot_all)
## Look into Essential Genes next
View(medians.og)
nv.genes = read_xlsx("/Users/ry28926/Desktop/Project/Synthego/Data/justgenes_BingList.xlsx", col_names=FALSE) %>% rename('genes' = `...1`)
nv.genes = nv.genes %>% mutate(gene = gsub("'", "", nv.genes$genes)) %>%
unique() %>% select(gene)
medians.og$nv = medians.og$gene %in% nv.genes$gene
medians.og$rank = rank(-medians.og$median)
ggplotly(plot)
medians = rank(-medians$median)
# Sort by median left to right
medians = counts %>% rowwise() %>% mutate(median = median(c_across(2:13)), range = max(c_across(2:12)) - min(c_across(2:12))) %>% ungroup() %>%
select(gene, median, range) %>%
arrange(desc(median))
medians$in_final = medians$gene %in% list.final$GENE_SYMBOL
medians$is_essential = medians$gene %in% list.essential$customer_gene_symbol
medians$not_possible = medians$gene %in% list.nope$customer_gene_symbol
medians = medians %>% filter(in_final == TRUE, is_essential == FALSE, not_possible == FALSE)
medians = rank(-medians$median)
# Sort by median left to right
medians = counts %>% rowwise() %>% mutate(median = median(c_across(2:13)), range = max(c_across(2:12)) - min(c_across(2:12))) %>% ungroup() %>%
select(gene, median, range) %>%
arrange(desc(median))
medians$in_final = medians$gene %in% list.final$GENE_SYMBOL
medians$is_essential = medians$gene %in% list.essential$customer_gene_symbol
medians$not_possible = medians$gene %in% list.nope$customer_gene_symbol
medians = medians %>% filter(in_final == TRUE, is_essential == FALSE, not_possible == FALSE)
View(medians)
medians$rank = rank(-medians$median)
View(medians)
View(medians.og)
# Output dfs
df.out = data.frame()
rm(df.out)
# Output dfs
editco.out = data.frame()
editco.out$not_in_final = medians.out %>%
filter(in_final == FALSE) %>% select(gene)
editco.out$not_in_final = medians.og %>%
filter(in_final == FALSE) %>% select(gene)
not_in_final = medians.og %>%
filter(in_final == FALSE) %>% select(gene)
View(not_in_final)
essential = medians.og %>% filter(is_essential == TRUE) %>% select(gene)
str(essential)
no_design = medians.og %>% filter(not_possible == TRUE) %>% select(gene)
editco.out = cbind(not_in_final, essential, no_design)
length(not_in_final) = 11
length(no_design) = 11
editco.out = cbind(not_in_final, essential, no_design)
length(essential) = 11
editco.out = cbind(not_in_final, essential, no_design)
View(editco.out)
editco.out = as.data.frame(not_in_final, essential, no_design)
editco.out = as.Data.Frame(not_in_final, essential, no_design)
as.data.frame()
editco.out = as.data.frame(not_in_final, essential, no_design)
install.packages(rowr)
editco.out = as.data.frame(cbind(not_in_final, essential, no_design))
View(editco.out)
View(essential)
# Output dfs
not_in_final = medians.og %>%
filter(in_final == FALSE) %>% select(gene)
View(not_in_final)
editco.out = cbind(not_in_final$gene, essential$gene, no_design$gene)
View(editco.out)
nrow(not_in_final) = 11
if (num_rows < 11) {
not_in_final <- not_in_final %>%
add_row(!!!rep(list(NA), ncol(not_in_final)), .n = 11 - num_rows)
}
# Output dfs
num_rows = 11 #max of bottom dfs
not_in_final = medians.og %>%
filter(in_final == FALSE) %>% select(gene)
if (num_rows < 11) {
not_in_final <- not_in_final %>%
add_row(!!!rep(list(NA), ncol(not_in_final)), .n = 11 - num_rows)
}
essential = medians.og %>% filter(is_essential == TRUE) %>% select(gene)
no_design = medians.og %>% filter(not_possible == TRUE) %>% select(gene)
if (num_rows < 11) {
no_design <- no_design %>%
add_row(!!!rep(list(NA), ncol(no_design)), .n = 11 - num_rows)
}
editco.out = cbind(not_in_final$gene, essential$gene, no_design$gene)
editco.out = data.frame(not_in_final$gene, essential$gene, no_design$gene)
if (num_rows < 11) {
no_design <- no_design %>%
add_row(!!!rep(list(NA), ncol(no_design)), .n = 11 - num_rows)
}
if (num_rows < 11) {
no_design$gene <- no_design$gene %>%
add_row(!!!rep(list(NA), ncol(no_design$gene)), .n = 11 - num_rows)
}
# Output dfs
num_rows = 1 #max of bottom dfs
not_in_final = medians.og %>%
filter(in_final == FALSE) %>% select(gene)
if (num_rows < 11) {
not_in_final <- not_in_final %>%
add_row(!!!rep(list(NA), ncol(not_in_final)), .n = 11 - num_rows)
}
# Output dfs
num_rows = nrow(not_in_final) #max of bottom dfs
not_in_final = medians.og %>%
filter(in_final == FALSE) %>% select(gene)
if (num_rows < 11) {
not_in_final$gene <- not_in_final$gene %>%
add_row(!!!rep(list(NA), ncol(not_in_final$gene)), .n = 11 - num_rows)
}
if (num_rows < 11) {
not_in_final <- not_in_final %>%
add_row(!!!rep(list(NA), ncol(not_in_final)), .n = 11 - num_rows)
}
max_length = max(lengths(list(not_in_final$gene, essential$gene, no_design$gene)))
pad_list = function(lst, max_length) {
length(lst) = max_length
lst
}
fin.pad = pad_list(not_in_final, max_length)
ess.pad = pad_list(essential, max_length)
des.pad = pad_list(no_design, max_length)
editco.out = tibble(
final_list = unlist(fin.pad),
essential = unlist(ess.pad),
no_des_list = unlist(des.pad)
)
fin.pad = pad_list(not_in_final, max_length)
ess.pad = pad_list(essential, max_length)
des.pad = pad_list(no_design, max_length)
editco.out = tibble(
final_list = unlist(fin.pad),
ess_list = unlist(ess.pad),
no_des_list = unlist(des.pad)
)
View(ess.pad)
editco.out = tibble(
final_list = unlist(fin.pad$gene),
ess_list = unlist(ess.pad$gene),
no_des_list = unlist(des.pad$gene)
)
fin.pad = pad_list(not_in_final$gene, max_length)
ess.pad = pad_list(essential$gene, max_length)
des.pad = pad_list(no_design$gene, max_length)
editco.out = tibble(
final_list = unlist(fin.pad),
ess_list = unlist(ess.pad),
no_des_list = unlist(des.pad)
)
View(editco.out)
write_csv(editco.out, "~/Desktop/Project/Synthego/Editco_consideration.csv")
medians.og$gene_rank = medians.og %>%
mutate(gene_rank = paste(gene, rank, sep="_"))
medians.og = medians
medians.og$nv = medians.og$gene %in% nv.genes$gene
medians.og$rank = rank(-medians.og$median)
medians.og = medians.og %>%
mutate(gene_rank = paste(gene, rank, sep="_"))
medians.og = medians.og %>%
mutate(gene_rank = paste(paste(gene, rank, sep=" (")), ")")
medians.og = medians.og %>%
mutate(gene_rank = (paste(paste(gene, rank, sep=" (")), ")"))
medians.og = medians.og %>%
mutate(gene_rank = paste(gene, paste0("(", rank, ")")))
medians.og = medians
medians.og$nv = medians.og$gene %in% nv.genes$gene
medians.og$rank = rank(-medians.og$median)
medians.og = medians.og %>%
mutate(gene_rank = paste(gene, paste0("(", rank, ")")))
write_csv(medians.og, "~/Desktop/Project/Synthego/all_genes_info.csv")
View(counts)
write_csv(counts, "~/Desktop/Project/Synthego/Data/all_gene_counts.csv")
install.packages(c("backports", "BiocManager", "broom", "cachem", "dqrng", "emmeans", "estimability", "farver", "fastmap", "gginnards", "ggsci", "KernSmooth", "knitr", "minqa", "mvtnorm", "openssl", "ragg", "RcppArmadillo", "rmarkdown", "stringi", "systemfonts", "tinytex", "uwot", "vegan", "xfun"))
shiny::runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
?reticulate
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
reticulate::repl_python()
install.packages('reticulate')
install.packages("reticulate")
detach("reticulate")
detach("package:reticulate")
reticulate::repl_python()
shiny::runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
hets = read.table("~/Desktop/Project/maple/svi-0058_UDD/compound_hets.tsv", sep="\t", header=T, fill=T, comment=F)
hets = read.table("~/Desktop/Project/maple/svi-0058_UDD/compound_hets.tsv", sep="\t", header=T, fill=T, comment.char=F)
runApp('Desktop/Project/maple/toucan')
hets = read.table("~/Desktop/Project/maple/svi-0058_UDD/compound_hets.tsv", sep="\t", header=T, fill=T, comment.char="##")
vcf = read.table(file, sep="\t", header=TRUE, fill=TRUE, comment.char="##")
#setwd("~/Desktop/Project/maple/shiny_app/toucan/")
file = "~/Desktop/Project/maple/erm_okay_vcf_calls.tsv"
vcf = read.table(file, sep="\t", header=TRUE, fill=TRUE, comment.char="##")
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
#setwd("~/Desktop/Project/maple/shiny_app/toucan/")
file = "~/Desktop/Project/maple/erm_okay_vcf_calls.tsv"
vcf = read.table(file, sep="\t", header=TRUE, fill=TRUE, comment.char="")
View(vcf)
library(tidyverse)
filtfile = file %>% filter(grepl("^MODIFIER\\(\\d+\\)$", IMPACT_details) & grepl("missense", MC_details))
filtvcf = vcf %>% filter(grepl("^MODIFIER\\(\\d+\\)$", IMPACT_details) & grepl("missense", MC_details))
filtvcf = vcf %>% filter(grepl("^MODIFIER\\(\\d+\\)$", IMPACT_details))
View(filtvcf)
unique(filtvcf$IMPACT_details)
mc_freq = filtvcf %>% mutate(MC_details_split = strsplit(as.character(MC_details), ", ")) %>%
# Unnest the list column to expand rows by each comma-separated item
unnest(MC_details_split) %>%
# Remove counts in parentheses
mutate(MC_details_cleaned = str_remove(MC_details_split, "\\(\\d+\\)")) %>%
# Group by the cleaned details and count occurrences
count(MC_details_cleaned, name = "frequency") %>%
arrange(desc(frequency))
mc_freq
runApp('Desktop/Project/maple/toucan')
# Justifications for baby filters
library(tidyverse)
library(tidyverse)
mc_freq
intron_vcf = vcf %>% filter(grepl("^intron_variant\\(\\d+\\)$"), MC_details)
intron_vcf = vcf %>% filter(grepl("^intron_variant\\(\\d+\\)$", MC_details)
)
View(vcf)
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
#setwd("~/Desktop/Project/maple/shiny_app/toucan/")
file = "~/Desktop/Project/maple/svi-0100_UDD/mcw_svi_0100_UDD_vcf_calls.tsv"
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
hets = read.table("~/Desktop/Project/maple/svi-0100_UDD/compound_hets.tsv", sep="\t", header=T, fill=T, comment.char="", quote="", stringsAsFactors = F)
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
install.packages(c("data.table", "Rcpp", "RcppEigen", "RcppArmadillo"), type = 'source')
> install.packages(c("data.table", "Rcpp", "RcppEigen", "RcppArmadillo"), type = 'source')
shiny::runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
clear()
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
library(tidyverse)
file = "~/Desktop/Project/maple/erm_okay_vcf_calls.tsv"    # This is chr1 on SVI-0100_UDD
vcf = read.table(file, sep="\t", header=TRUE, fill=TRUE, comment.char="")
intron_vcf = vcf %>% filter(grepl("^intron_variant\\(\\d+\\)$", MC_details))
# Show how many rows have only MODIFIER period (294792 / 299595)
filtvcf = vcf %>% filter(grepl("^MODIFIER\\(\\d+\\)$", IMPACT_details))
unique(filtvcf$IMPACT_details) #Verify that that is the case
# Among MODIFIER only rows, whats the frequency of all MC that appear?
mc_freq = filtvcf %>% mutate(MC_details_split = strsplit(as.character(MC_details), ", ")) %>%
# Unnest the list column to expand rows by each comma-separated item
unnest(MC_details_split) %>%
# Remove counts in parentheses
mutate(MC_details_cleaned = str_remove(MC_details_split, "\\(\\d+\\)")) %>%
# Group by the cleaned details and count occurrences
count(MC_details_cleaned, name = "frequency") %>%
arrange(desc(frequency))
## NO MISSENSE, NONSENSE, or SILET
mc_freq
unique(filtvcf$IMPACT_details) #Verify that that is the case
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
runApp('Desktop/Project/maple/toucan')
